==============================================
Developing Databases
==============================================

Install MySQL
==============

DIRAC mainly uses *MySQL* as its database engine. There are many database structures used by DIRAC. Each system tipically has more than one database structure to keep its state. The first step is to install *MySQL* from your distribution. For rpm based distributions execute::

  > yum install mysql-server
  
For debian based distributions execute::

  > apt-get install mysql-server
  
If you have either another distribution or another operative system please head to `MySQL 
<http://www.mysql.com/>`_ to check how to install MySQL in your host. Once MySQL is installed you need to create a database in MySQL for each database you want to use or develop. First create the database::

  > mysqladmin -u root -p create yourdbname
  
Once the database has been created::

  > mysql -u root -p yourdbname
  Welcome to the MySQL monitor.  Commands end with ; or \g.
  Your MySQL connection id is 42
  Server version: 5.6.14 MySQL Community Server (GPL)

  Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.

  Oracle is a registered trademark of Oracle Corporation and/or its
  affiliates. Other names may be trademarks of their respective
  owners.

  Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

  mysql> grant all on yourdbname to yourusername identified by 'yourpasswd';
  Query OK, 0 rows affected (0.01 sec)
  mysql> grant all on yourdbname.* to yourusername identified by 'yourpasswd';
  Query OK, 0 rows affected (0.01 sec)
  mysql> flush privileges;
  Query OK, 0 rows affected (0.01 sec)
  
With the previous steps you've created a database called *yourdbname* and authorized user *yourusername* with password *yourpasswd* to use it.

Develop the database
=====================

To develop a new database structure it requires to design a database schema and develop the python database class that will interact with the database itself. A simple example of the python class of a database follows:

.. literalinclude:: AtomDB.py

Let's break down the example. The first two lines are simple includes required. Then the class definition. The name of the class should be the same name as the file where it is. So *AtomDB* should be in *AtomDB.py*. The class should inherit from the *DB* class. The *DB* class includes all the methods necessary to access, query, modify... the database. 

The first line in the *__init__* method should be the initialization of the parent (*DB*) class. That initialization requires 3 parameters:

 1. Logging name of the database. This name will be used in all the logging messages generated by this class.
 2. Full name of the database. With *System/Name*. So it can know where in the CS look for the initialization parameters. In this case it would be */Systems/Test/<instance name>/Databases/AtomDB*.
 3. Maximum number of requests to queue. 10 is a good value for this setting.
 
After the initialization of the *DB* parent class we call our own *__initializeDB* method. This method (following *__init__* in the example) first retrieves all the tables already in the database. Then for each table that has not yet been created then it creates a definition of the table and creates all the missing tables. Each table definition includes all the fields with their value type, primary keys, extra indexes... By default all tables will be created using the *InnoDB* engine.

The *addStuff* method simply inserts into the created table the argument value.

Configure the database access
==============================

The last step is to configure the database credentials for DIRAC to be able to connect. In our previous example the CS path was */Systems/Test/<instance name>/Databases/AtomDB*. That section should contain::

  Systems
  {
    Test
    {
      <instance name>
      {
        Databases
        {
          AtomDB
          {
            Host = localhost
            User = yourusername
            Password = yourpasswd
            DBName = yourdbname
          }
       }
     }
  }
  
Keep in mind that <instance name> is the name of the instance defined under */DIRAC/Setups/<your setup>/Test* and <your setup> is defined under */DIRAC/Setup*.

Once that is defined you're ready to go

Trying the database from the command line
==========================================

You can try to access the database by doing:

.. code-block:: python
   
   from DIRAC.TestSystem.DB.AtomDB import AtomDB
   
   try:
     atomdb = AtomDB()
   except Exception:
      print "Oops. Something went wrong..."
      raise
   result = atomdb.addStuff( 'something' )
   if not result['OK']:
     print "Error while inserting into db:", result['Message'] #Here, in DIRAC, you better use the gLogger
   else:
     print result[ 'Value' ] #Here, in DIRAC, you better use the gLogger

     